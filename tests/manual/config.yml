envs:
  management:
    apps:
      bootstrap: {}
      core_deployer: {app_deployer: bootstrap, vars: {argocd: "${argocd_app_presets[default]}"}}
      service_deployer: {app_deployer: bootstrap, vars: {argocd: {project: default, destination: {namespace: kube-system}}}}
      app_1:
        app_deployer: core_deployer
        vars:
          argocd:
            project: management
            sync_wave: -1
            source:
              target_revision: custom_revision
            destination:
              namespace: kube-default
      app_2:
        app_deployer: core_deployer
        vars:
          argocd:
            project: management
            destination:
              namespace: kube-default
            ignoreDifferences:
              - group: apps
                kind: Deployment
                name: guestbook
                namespace: default
                jsonPointers:
                  - /spec/replicas
              - group: storage.k8s.io
                kind: CSIDriver
                jqPathExpressions:
                  - .spec.seLinuxMount
            finalizers: null
      app_3: {app_deployer: service_deployer, vars: {argocd: {project: management, destination: {namespace: "${namespace}"}}}}
      app_4: {app_deployer: service_deployer, vars: {argocd: {project: management, destination: {namespace: kube-default}, ignoreDifferences: "${argocd_ignore_diff}"}}}
      app_5: {app_deployer: service_deployer, vars: {argocd: {project: management, destination: {namespace: kube-default}}}}
      app_6: {app_deployer: service_deployer, vars: {argocd: {project: management, destination: {namespace: kube-default}}}}
      subdirectory/app_7: {app_deployer: service_deployer, vars: {argocd: {project: management, destination: {namespace: kube-default}}}}
      subdirectory_2/app_8: {app_deployer: service_deployer, vars: {argocd: {project: management, destination: {namespace: kube-default}}}}
      app_9: {app_deployer: service_deployer, vars: {argocd: {project: management, destination: {namespace: kube-default}}}}
      app_10: {app_deployer: service_deployer, vars: {argocd: {project: management, destination: {namespace: kube-default}}}}
      app_11: {app_deployer: service_deployer, non_k8s_files_to_render: ['values.yml.j2'], vars: {argocd: {project: management, destination: {namespace: kube-default}}}}
      app_12: {vars: {version: 1.1.1}}
      app_13: {app_deployer: service_deployer, vars: {argocd: {project: management, source: {directory: {recurse: true}}, destination: {namespace: kube-default}}}}
      app_14: {app_deployer: service_deployer, exclude_rendering: ['testcases','cases'], vars: {argocd: {project: management, destination: {namespace: kube-default}, ignoreDifferences: "${argocd_ignore_diff}"}}}
      app_15: {app_deployer: service_deployer, vars: {argocd: {project: management, destination: {namespace: kube-default}, ignoreDifferences: "${argocd_ignore_diff}"}}}
      app_16: {app_deployer: service_deployer, vars: {argocd: {project: management, destination: {namespace: kube-default}, ignoreDifferences: "${argocd_ignore_diff}"}}}
    vars:
      argocd:
        destination:
          server: ${env_name}-api-server
        sync_policy:
          automated: null
      json_var: json_management
      parent_var:
        env_specific_var: test_env_specific
  external_1:
    apps:
      bootstrap: {}
      unused_deployer: {app_deployer: bootstrap, vars: {argocd: {project: default, destination: {namespace: kube-system}}}}
      app_1: {app_deployer: core_deployer, app_deployer_env: management, vars: {argocd: {project: external_1, destination: {namespace: kube-default}}}}
      app_2: {app_deployer: core_deployer, app_deployer_env: management, vars: {argocd: {project: management, destination: {namespace: kube-default}}}}
      app_5: {app_deployer: service_deployer, app_deployer_env: management, vars: {argocd: {project: external_1, destination: {namespace: kube-default}}}}
      subdirectory/app_7: {app_deployer: service_deployer, app_deployer_env: management, vars: {argocd: {project: management, destination: {namespace: kube-default}}}}
      app_9: {app_deployer: service_deployer, app_deployer_env: management, vars: {argocd: {project: management, destination: {namespace: kube-default}}}}
    vars:
      argocd:
        destination:
          server: ${env_name}-api-server
  external_2:
    apps: {}
    vars: {}

vars:
  argocd:
    namespace: argocd
    finalizers:
      - resources-finalizer.argocd.argoproj.io
    source:
      repo_url: url
      target_revision: revision
    sync_policy:
      automated:
        selfHeal: true
        prune: true
        allowEmpty: true
      # https://www.arthurkoziel.com/fixing-argocd-crd-too-long-error/
      syncOptions:
        - ServerSideApply=true
  argocd_app_presets:
    default:
      project: default
      destination:
        namespace: ${namespace}
  namespace: kube-default
  version: 0.1.0
  double_reference_version: ${reference_version}
  reference_version: ${app[version]}
  resource: Deployment_thanos.yml
  app:
    resource: ${resource}
    version: 0.1.0
  json_var: json
  argocd_ignore_diff:
    - group: apps
      kind: Deployment
      name: guestbook
      namespace: default
      jsonPointers:
        - /spec/replicas
